<svg viewBox="0 0 800 550" xmlns="http://www.w3.org/2000/svg">
  <defs>
    <marker id="arrowhead" markerWidth="10" markerHeight="10" refX="9" refY="3" orient="auto">
      <polygon points="0 0, 10 3, 0 6" fill="#333"/>
    </marker>
  </defs>
  
  <style>
    .step-title { font: bold 14px sans-serif; fill: #222; }
    .step-text { font: 12px sans-serif; fill: #444; }
    .space-label { font: 16px sans-serif; fill: #666; }
    .kernel-box { fill: #f0f0f0; stroke: #999; stroke-width: 2; }
    .user-box { fill: #e0e0e0; stroke: #666; stroke-width: 2; }
    .arrow { stroke: #333; stroke-width: 2; fill: none; marker-end: url(#arrowhead); }
  </style>
  
  <!-- Kernel Space -->
  <rect x="50" y="20" width="300" height="510" rx="10" class="kernel-box" opacity="0.3"/>
  <text x="200" y="45" text-anchor="middle" class="space-label">Kernel Space</text>
  
  <!-- User Space -->
  <rect x="450" y="20" width="300" height="510" rx="10" class="user-box" opacity="0.3"/>
  <text x="600" y="45" text-anchor="middle" class="space-label">User Space</text>
  
  <!-- Step 1: Shell -->
  <rect x="470" y="70" width="260" height="50" rx="5" class="user-box"/>
  <text x="600" y="90" text-anchor="middle" class="step-title">1. Shell (bash)</text>
  <text x="600" y="105" text-anchor="middle" class="step-text">fork() + execve("./hello_world")</text>
  
  <!-- Arrow to kernel -->
  <path d="M 470 120 L 350 150" class="arrow"/>
  
  <!-- Step 2: Kernel execve -->
  <rect x="70" y="150" width="260" height="60" rx="5" class="kernel-box"/>
  <text x="200" y="170" text-anchor="middle" class="step-title">2. Kernel execve()</text>
  <text x="200" y="185" text-anchor="middle" class="step-text">• Read ELF headers</text>
  <text x="200" y="200" text-anchor="middle" class="step-text">• Load interpreter: ld-linux.so</text>
  
  <!-- Arrow to ld -->
  <path d="M 330 180 L 450 210" class="arrow"/>
  
  <!-- Step 3: Dynamic Linker -->
  <rect x="470" y="210" width="260" height="80" rx="5" class="user-box"/>
  <text x="600" y="230" text-anchor="middle" class="step-title">3. ld-linux.so (in userspace)</text>
  <text x="600" y="245" text-anchor="middle" class="step-text">• Parse ELF dynamic section</text>
  <text x="600" y="260" text-anchor="middle" class="step-text">• Find required libraries (libc.so)</text>
  <text x="600" y="275" text-anchor="middle" class="step-text">• mmap() each library</text>
  
  <!-- Arrow to kernel mmap -->
  <path d="M 470 250 L 350 280" class="arrow"/>
  
  <!-- Step 4: Kernel mmap -->
  <rect x="70" y="280" width="260" height="80" rx="5" class="kernel-box"/>
  <text x="200" y="300" text-anchor="middle" class="step-title">4. Kernel mmap()</text>
  <text x="200" y="315" text-anchor="middle" class="step-text">• Create virtual memory mappings</text>
  <text x="200" y="330" text-anchor="middle" class="step-text">• Mark pages as not-present</text>
  <text x="200" y="345" text-anchor="middle" class="step-text">• Return (no loading yet)</text>
  
  <!-- Arrow back -->
  <path d="M 330 320 L 450 350" class="arrow"/>
  
  <!-- Step 5: Start execution -->
  <rect x="470" y="350" width="260" height="60" rx="5" class="user-box"/>
  <text x="600" y="370" text-anchor="middle" class="step-title">5. Start execution</text>
  <text x="600" y="385" text-anchor="middle" class="step-text">• ld-linux jumps to _start</text>
  <text x="600" y="400" text-anchor="middle" class="step-text">• _start calls main()</text>
  
  <!-- Arrow to page fault -->
  <path d="M 470 410 L 350 440" class="arrow"/>
  
  <!-- Step 6: Page Fault -->
  <rect x="70" y="440" width="260" height="80" rx="5" class="kernel-box"/>
  <text x="200" y="460" text-anchor="middle" class="step-title">6. Page Fault (on printf access)</text>
  <text x="200" y="475" text-anchor="middle" class="step-text">• Check if page already in memory</text>
  <text x="200" y="490" text-anchor="middle" class="step-text">• Load from disk or share existing</text>
  <text x="200" y="505" text-anchor="middle" class="step-text">• Map page and resume program</text>
</svg>